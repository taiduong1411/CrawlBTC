// Module x·ª≠ l√Ω t·ª´ng account
// T√°ch ri√™ng ƒë·ªÉ d·ªÖ maintain v√† reuse

const ac = require("@antiadmin/anticaptchaofficial");
const puppeteer = require("puppeteer");
const config = require("./config");

// Bi·∫øn global ƒë·ªÉ reuse browser (ti·∫øt ki·ªám RAM v√† th·ªùi gian)
let sharedBrowser = null;

// T√†i kho·∫£n "dummy" ƒë·ªÉ tr√°nh b·ªã kh√≥a khi ƒëƒÉng nh·∫≠p sai nhi·ªÅu l·∫ßn
const DUMMY_ACCOUNT = {
  username: "0100978593",
  password: "0100978593",
};

// H√†m th·ª≠ ƒëƒÉng nh·∫≠p 1 l·∫ßn v·ªõi captcha
async function attemptLogin(page, username, password) {
  try {
    // L·∫•y captcha
    const captchaBase64 = await page.evaluate(() => {
      return new Promise((resolve, reject) => {
        const imgs = Array.from(document.querySelectorAll("img"));
        const captchaImg = imgs.find((img) =>
          img.src.includes("GeneralCaptchaHandler")
        );

        if (!captchaImg) {
          reject(new Error("Kh√¥ng t√¨m th·∫•y h√¨nh captcha"));
          return;
        }

        const canvas = document.createElement("canvas");
        canvas.width = captchaImg.naturalWidth || captchaImg.width;
        canvas.height = captchaImg.naturalHeight || captchaImg.height;
        const ctx = canvas.getContext("2d");

        if (captchaImg.complete) {
          ctx.drawImage(captchaImg, 0, 0);
          const dataURL = canvas.toDataURL("image/png");
          resolve(dataURL.split(",")[1]);
        } else {
          captchaImg.onload = () => {
            ctx.drawImage(captchaImg, 0, 0);
            const dataURL = canvas.toDataURL("image/png");
            resolve(dataURL.split(",")[1]);
          };
          captchaImg.onerror = () => reject(new Error("Kh√¥ng load ƒë∆∞·ª£c h√¨nh"));
        }
      });
    });

    // Gi·∫£i captcha
    ac.setAPIKey(config.ANTICAPTCHA_KEY);
    ac.setSoftId(0);
    ac.settings.case = true;

    const captchaText = await ac.solveImage(captchaBase64, true);
    console.log(`      üîê Captcha: "${captchaText}"`);

    // Clear input fields tr∆∞·ªõc
    await page.evaluate(() => {
      const inputs = [
        "#ctl00_cplhContainer_txtLoginName",
        "#ctl00_cplhContainer_txtPassword",
        "#ctl00_cplhContainer_txtCaptcha",
      ];
      inputs.forEach((selector) => {
        const el = document.querySelector(selector);
        if (el) el.value = "";
      });
    });

    // ƒêi·ªÅn form
    await page.type("#ctl00_cplhContainer_txtLoginName", username);
    await page.type("#ctl00_cplhContainer_txtPassword", password);
    await page.type("#ctl00_cplhContainer_txtCaptcha", captchaText);

    // Click ƒëƒÉng nh·∫≠p
    await page.click("#ctl00_cplhContainer_btnLogin");
    await new Promise((resolve) => setTimeout(resolve, 3000));

    // Ki·ªÉm tra k·∫øt qu·∫£
    const currentURL = page.url();

    // L·∫•y message error (n·∫øu c√≥)
    const errorMessage = await page
      .evaluate(() => {
        const messageLabel = document.querySelector(
          '[id*="Message"], [id*="Label"]'
        );
        if (messageLabel && messageLabel.textContent.trim()) {
          return messageLabel.textContent.trim();
        }

        const errorDiv = document.querySelector(
          '.error, .alert, [class*="error"]'
        );
        return errorDiv ? errorDiv.textContent.trim() : null;
      })
      .catch(() => null);

    // V·∫´n ·ªü trang login = ƒëƒÉng nh·∫≠p fail
    if (currentURL.includes("Login.aspx")) {
      return {
        success: false,
        error: errorMessage || "M√£ x√°c th·ª±c kh√¥ng ƒë√∫ng",
      };
    }

    // ƒêƒÉng nh·∫≠p th√†nh c√¥ng
    return { success: true };
  } catch (error) {
    return {
      success: false,
      error: error.message,
    };
  }
}

// H√†m x·ª≠ l√Ω 1 account v·ªõi retry cho captcha
async function processAccount(username, password) {
  let page = null;
  const MAX_CAPTCHA_RETRIES = 3;

  try {
    const browser = await getBrowser();
    page = await browser.newPage();
    await page.setViewport({ width: 1280, height: 800 });

    // M·ªü trang login
    await page.goto(config.LOGIN_URL, {
      waitUntil: "networkidle0",
      timeout: config.BROWSER_TIMEOUT,
    });
    await page.waitForSelector("#ctl00_cplhContainer_txtLoginName");

    // Th·ª≠ ƒëƒÉng nh·∫≠p v·ªõi retry
    let loginSuccess = false;
    let lastError = "";

    for (let attempt = 1; attempt <= MAX_CAPTCHA_RETRIES; attempt++) {
      console.log(`   üîÑ L·∫ßn th·ª≠ ${attempt}/${MAX_CAPTCHA_RETRIES}`);

      const loginResult = await attemptLogin(page, username, password);

      if (loginResult.success) {
        loginSuccess = true;
        console.log(`   ‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!`);
        break;
      }

      lastError = loginResult.error;

      // Check xem l·ªói c√≥ ph·∫£i captcha kh√¥ng
      const isCaptchaError =
        loginResult.error.toLowerCase().includes("x√°c th·ª±c") ||
        loginResult.error.toLowerCase().includes("captcha");

      if (isCaptchaError && attempt < MAX_CAPTCHA_RETRIES) {
        console.log(`   ‚ö†Ô∏è  Captcha sai, reload trang v√† th·ª≠ l·∫°i...`);
        // Reload trang ƒë·ªÉ l·∫•y captcha m·ªõi
        await page.goto(config.LOGIN_URL, {
          waitUntil: "networkidle0",
          timeout: config.BROWSER_TIMEOUT,
        });
        await page.waitForSelector("#ctl00_cplhContainer_txtLoginName");
        await new Promise((resolve) => setTimeout(resolve, 2000));
      } else if (!isCaptchaError) {
        // L·ªói username/password ‚Üí ƒêƒÉng nh·∫≠p dummy ƒë·ªÉ tr√°nh b·ªã kh√≥a
        console.log(`   ‚ùå L·ªói username/password: ${loginResult.error}`);
        console.log(`   üîÑ ƒêƒÉng nh·∫≠p t√†i kho·∫£n dummy ƒë·ªÉ tr√°nh b·ªã kh√≥a...`);

        // Reload trang
        await page.goto(config.LOGIN_URL, {
          waitUntil: "networkidle0",
          timeout: config.BROWSER_TIMEOUT,
        });
        await page.waitForSelector("#ctl00_cplhContainer_txtLoginName");
        await new Promise((resolve) => setTimeout(resolve, 2000));

        // ƒêƒÉng nh·∫≠p v·ªõi dummy account (t·ªëi ƒëa 2 l·∫ßn th·ª≠)
        let dummySuccess = false;
        for (let i = 1; i <= 2; i++) {
          console.log(`      üîì Th·ª≠ ƒëƒÉng nh·∫≠p dummy (l·∫ßn ${i}/2)...`);
          const dummyResult = await attemptLogin(
            page,
            DUMMY_ACCOUNT.username,
            DUMMY_ACCOUNT.password
          );

          if (dummyResult.success) {
            console.log(`      ‚úÖ ƒêƒÉng nh·∫≠p dummy th√†nh c√¥ng - Tr√°nh b·ªã kh√≥a!`);
            dummySuccess = true;
            break;
          }

          // N·∫øu fail l·∫ßn 1, reload v√† th·ª≠ l·∫°i
          if (i < 2) {
            await page.goto(config.LOGIN_URL, {
              waitUntil: "networkidle0",
              timeout: config.BROWSER_TIMEOUT,
            });
            await page.waitForSelector("#ctl00_cplhContainer_txtLoginName");
            await new Promise((resolve) => setTimeout(resolve, 1000));
          }
        }

        if (!dummySuccess) {
          console.log(`      ‚ö†Ô∏è  C·∫£nh b√°o: Kh√¥ng ƒëƒÉng nh·∫≠p ƒë∆∞·ª£c dummy account`);
        }

        // K·∫øt th√∫c v√≤ng l·∫∑p, kh√¥ng retry account ch√≠nh n·ªØa
        break;
      }
    }

    if (!loginSuccess) {
      await page.close();
      return {
        success: false,
        error: lastError,
      };
    }

    // B∆∞·ªõc 2: L·∫•y th√¥ng tin
    await page.goto(config.INFO_URL, {
      waitUntil: "networkidle0",
      timeout: config.BROWSER_TIMEOUT,
    });
    await new Promise((resolve) => setTimeout(resolve, 2000));

    const businessInfo = await page.evaluate(() => {
      const emailInput = document.querySelector(
        'input[name*="RepresenterEmail"]'
      );
      const mobileInput = document.querySelector(
        'input[name*="RepresenterMobile"]'
      );

      return {
        email: emailInput ? emailInput.value : "",
        mobile: mobileInput ? mobileInput.value : "",
      };
    });

    await page.close();

    return {
      success: true,
      email: businessInfo.email,
      phone: businessInfo.mobile,
    };
  } catch (error) {
    if (page) await page.close();
    return {
      success: false,
      error: error.message,
    };
  }
}

// H√†m l·∫•y ho·∫∑c t·∫°o browser
async function getBrowser() {
  if (!sharedBrowser || !sharedBrowser.isConnected()) {
    console.log("üåê ƒêang kh·ªüi ƒë·ªông browser...");

    // Config cho Render/Railway
    const launchOptions = {
      headless: config.BROWSER_HEADLESS,
      args: config.BROWSER_ARGS,
    };

    // N·∫øu c√≥ env PUPPETEER_EXECUTABLE_PATH (Render set)
    if (process.env.PUPPETEER_EXECUTABLE_PATH) {
      launchOptions.executablePath = process.env.PUPPETEER_EXECUTABLE_PATH;
    }

    sharedBrowser = await puppeteer.launch(launchOptions);
    console.log("‚úÖ Browser ƒë√£ kh·ªüi ƒë·ªông!");
  }
  return sharedBrowser;
}

// H√†m ƒë√≥ng browser
async function closeBrowser() {
  if (sharedBrowser) {
    await sharedBrowser.close();
    sharedBrowser = null;
    console.log("üîí Browser ƒë√£ ƒë√≥ng!");
  }
}

module.exports = {
  processAccount,
  closeBrowser,
};
